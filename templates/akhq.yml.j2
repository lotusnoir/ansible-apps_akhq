akhq:
  connections:
{% for cluster in kafka_bootstrap_servers %}
    {{ cluster.name }}:
      properties:
        bootstrap.servers: "{{ cluster.servers }}"
{% for key, val in cluster.custom_properties.items() %}
        {{ key }}: {{ val }}
{% endfor %}
{% endfor %}

  # Auth & Roles
  security:
    default-group: no-roles # Forces login

    # Basic auth configuration
    basic-auth:
      - username: admin
        password: "{{ akhq_admin_pwd_256 }}"
        passwordHash: SHA256
        groups:
        - admin
      - username: reader
        password: "{{ akhq_reader_pwd_256 }}"
        passwordHash: SHA256
        groups:
        - reader

  server:
    base-path: "" # if behind a reverse proxy, path to akhq without trailing slash (optional). Example: akhq is
                  # behind a reverse proxy with url http://my-server/akhq, set base-path: "/akhq".
                  # Not needed if you're behind a reverse proxy with subdomain http://akhq.my-server/
    access-log: # Access log configuration (optional)
      enabled: true # true by default                                                                                                              
      name: org.akhq.log.access # Logger name
      format: "[Date: {}] [Duration: {} ms] [Url: {} {}] [Status: {}] [Ip: {}] [Length: {}] [Port: {}]" # Logger format


  # Topic display data options (optional)
  topic-data:
    sort: OLDEST # default sort order (OLDEST, NEWEST) (default: OLDEST)
    size: 50 # max record per page (default: 50)
    poll-timeout: 1000 # The time, in milliseconds, spent waiting in poll if data is not available in the buffer.


micronaut:
  security:
    enabled: true
    # Ldap authentificaton configuration
    ldap:
      default:
        enabled: {{ akhq_ldap_enabled }}
        context:
          server: '{{ akhq_ldap_server }}'
          managerDn: '{{ akhq_ldap_bindn }}'
          managerPassword: '{{ akhq_ldap_bindpwd }}'
        search:
          base: "{{ akhq_ldap_search_base }}"
        groups:
          enabled: {{ akhq_ldap_group_enable }}
          base: "{{ akhq_ldap_group_base }}"
  # SSL endpoint configuration
  ssl:
    enabled: {{ akhq_listener_ssl }}
    buildSelfSigned: {{ akhq_listener_ssl_self_signed }}
    protocol: TLSv1.2


#Prometheus metrics
endpoints:
  all:
    port: 9118
    enabled: true
    sensitive: false
  health:
    details-visible: ANONYMOUS
  loggers:
    write-sensitive: false


#  connections:
#    kafka-net: # url friendly name for the cluster (letter, number, _, -, ... dot are not allowed here)
#      properties: # standard kafka properties (optional)
#        bootstrap.servers: "titi-01.exemple.net"
#      schema-registry:
#        url: "http://schema-registry:8085" # schema registry url (optional)
#        # Basic Auth user / pass
#        basic-auth-username: basic-auth-user
#        basic-auth-password: basic-auth-pass
#        properties: # standard kafka properties (optional)
#          ssl.protocol: TLS
#      connect:
#        - name: connect-1
#          url: "http://connect:8083"
#          # Basic Auth user / pass (optional)
#          basic-auth-username: basic-auth-user
#          basic-auth-password: basic-auth-pass
#          # ssl store configuration (optional)
#          ssl-trust-store: /app/truststore.jks
#          ssl-trust-store-password: trust-store-password
#          ssl-key-store: /app/truststore.jks
#          ssl-key-store-password: key-store-password
#        - name: connect-2
#          url: "http://connect:8084"
#          # Basic Auth user / pass (optional)
#          basic-auth-username: basic-auth-user
#          basic-auth-password: basic-auth-pass
#          # ssl store configuration (optional)
#          ssl-trust-store: /app/truststore.jks
#          ssl-trust-store-password: trust-store-password
#          ssl-key-store: /app/truststore.jks
#          ssl-key-store-password: key-store-password
#
#    my-cluster-ssl:
#      properties:
#        bootstrap.servers: "kafka:9093"
#        security.protocol: SSL
#        ssl.truststore.location: /app/truststore.jks
#        ssl.truststore.password: password
#        ssl.keystore.location: /app/keystore.jks
#        ssl.keystore.password: password
#        ssl.key.password: password
#
#    my-cluster-sasl:
#      properties:
#        bootstrap.servers: "kafka:9094"
#        security.protocol: SASL_SSL
#        sasl.mechanism: SCRAM-SHA-256
#        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="admin" password="password";
#        ssl.truststore.location: /app/truststore.jks
#        ssl.truststore.password: password
#        ssl.keystore.location: /app/keystore.jks
#        ssl.keystore.password: password
#        ssl.key.password: password
#
#  pagination:
#    page-size: 25 # number of elements per page (default : 25)
#    threads: 16 # Number of parallel threads to resolve page
#
#  # Topic list display options (optional)
#  topic:
#    retention: 172800000 # default retention period when creating topic
#    partition: 3 #  default number of partition when creating topic
#    replication: 3 # default number of replicas when creating topic
#    default-view: HIDE_INTERNAL # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM)
#    internal-regexps: # list of regexp to be considered as internal (internal topic can't be deleted or updated)
#      - "^_.*$"
#      - "^.*_schemas$"
#      - "^.*connect-config$"
#      - "^.*connect-offsets$1"
#      - "^.*connect-status$"
#    stream-regexps: # list of regexp to be considered as internal stream topic
#      - "^.*-changelog$"
#      - "^.*-repartition$"
#      - "^.*-rekey$"
#    skip-consumer-groups: false # Skip loading consumer group information when showing topics
#
#  # Topic display data options (optional)
#  topic-data:
#    sort: OLDEST # default sort order (OLDEST, NEWEST) (default: OLDEST)
#    size: 50 # max record per page (default: 50)
#    poll-timeout: 1000 # The time, in milliseconds, spent waiting in poll if data is not available in the buffer.
#
#  # Auth & Roles (optional)
#  security:
#    default-group: admin # Default groups for all the user even unlogged user
#    # Groups definition
#    groups:
#      admin: # Group name
#        roles:  # roles for the group
#          - topic/read
#          - topic/insert
#          - topic/delete
#          - topic/config/update
#          - node/read
#          - node/config/update
#          - topic/data/read
#          - topic/data/insert
#          - topic/data/delete
#          - group/read
#          - group/delete
#          - group/offsets/update
#          - registry/read
#          - registry/insert
#          - registry/update
#          - registry/delete
#          - registry/version/delete
#          - acls/read
#          - connect/read
#          - connect/insert
#          - connect/update
#          - connect/delete
#          - connect/state/update
#        attributes:
#          # Regexp to filter topic available for group
#          topics-filter-regexp: "test.*"
#      topic-reader: # Other group
#        roles:
#          - topic/read
#        attributes:
#          topics-filter-regexp: "test\\.reader.*"
#
#    # Basic auth configuration
#    basic-auth:
#      admin: # Username
#        password: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 # Password in sha256
#        groups: # Groups for the user
#          - admin
#          - topic-reader
#
#    # Ldap Groups configuration (when using ldap)
#    ldap:
#      group:
#        group-ldap-1: # just a key, no matter will be override by name below
#          name: "group-ldap-1"
#          groups: # Akhq groups list
#            - topic-reader
#        group-ldap-2:
#          name: "group-ldap-2"
#          groups:
#            - admin
#      user:
#        riemann: # ldap user id
#          groups: # Akhq groups list
#            - topic-reader
#        einstein:
#          groups:
#            - admin
